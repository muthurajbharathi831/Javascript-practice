Event Bubbling

When elements receive events, such events propagate to their parents and ancestors upward in the DOM tree. This is the concept of Event Bubbling, and it allows parent elements to handle events that occur on their children's elements.

Event objects also have the stopPropagation method which you can use to stop the bubbling of an event. This is useful in cases where you want an element to receive a click event only when it is clicked and not when any of its children elements are clicked.

stopPropagation and preventDefault are methods of the event object for stopping default behaviors. Here is an article on the difference between these methods.

https://www.freecodecamp.org/news/event-bubbling-in-javascript/

Document
  Html
    head
      body
        div
          span
            button

const button = document.getElementsbyTagName('button')[0]
const span = document.getElementsbyTagName('span')[0]
const div = document.getElementsbyTagName('div')[0]
const body = document.getElementsbyTagName('body')[0]


button.addEventListener('click',()=>{
  console.log("button Clicked');
})

span.addEventListener('click',()=>{
  console.log("span Clicked');
})
div.addEventListener('click',()=>{
  console.log("div Clicked');
})

body.addEventListener('click',()=>{
  console.log("body Clicked');
})

================

body.addEventListener('click', () => {
  console.log("body was clicked")
})

div.addEventListener('click', () => {
  console.log("div was clicked")
})

span.addEventListener('click', () => {
  console.log("span was clicked")
})

button.addEventListener('click', (event) => {
  event.stopPropagation()
  console.log("button was clicked")
})

==============
body.addEventListener('click', () => {
  console.log("body was clicked")
})

div.addEventListener('click', () => {
  console.log("div was clicked")
})

span.addEventListener('click', () => {
  event.stopPropagation()
  console.log("span was clicked")
})

button.addEventListener('click', (event) => {
  
  console.log("button was clicked")
})







